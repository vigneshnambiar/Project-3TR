pipeline {
    agent any
    tools{
        nodejs 'nodejs'
    }
    environment{
        SCANNER_HOME=tool 'sonar-scanner'
        REGION='eu-north-1'
        ECR_REPO=credentials('REPO_02')
        ACCOUNT_ID=credentials('Account_ID')
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout Stage'){
            steps {
                git branch: 'main', url: 'https://github.com/vigneshnambiar/Project-3TR.git'
            }
        }
        stage('Sonar Scanner'){
            steps {
                dir('Application-Code/backend'){
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=backtend \
                        -Dsonar.projectKey=backend '''
                    }
                }    
            }
        }
        stage('Quality Check'){
            steps{
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }
        // stage('Owasp Dependency check'){
        //     steps{
        //         dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dp-check'
        //         dependencyCheckPublisher pattern: '**/dp-check-report.xml'
        //     }
        // }
        stage('Trivy Scan'){
            steps{
                dir('Application-Code/backend'){
                    sh 'trivy fs . > trivy-report.txt'
                }
            }
        }    
        stage('Docker Build Stage'){
            steps{
                script{
                    dir('Application-Code/backend'){
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t $ECR_REPO .'
                    }
                }    
            }
        }
        stage('Docker Push - ECR'){
            steps{
                script{
                    sh 'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com'
                    sh 'docker tag ${ECR_REPO} ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}:${BUILD_NUMBER}'
                    sh 'docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}:${BUILD_NUMBER}'
                }
            }
        }
        stage('Trivy Image Scan'){
            steps{
                sh 'trivy image ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}:${BUILD_NUMBER} > trivyimg-report.txt'
            }
        }
        stage('Checkout Stage-01'){
            steps{
                git branch: 'main', url: 'https://github.com/vigneshnambiar/Project-3TR.git'
            }
        }
        stage('Update K8S manifest'){
            environment{
                    GIT_REPO_NAME = "Project-3TR"
                    GIT_USER_NAME = "vigneshnambiar"
            }
            steps{
                dir('Kubernetes-Manifests-file/Backend'){
                    withCredentials([gitUsernamePassword(credentialsId: 'GIT_TOKEN', gitToolName: 'Default')]){
                        sh '''
                            git config user.email "vicktest@gmail.com"
                            git config user.name "vigneshnambiar"
                            echo ${BUILD_NUMBER}
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/$ECR_REPO:${imageTag}/${ECR_REPO}:${BUILD_NUMBER}/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Build number commit"
                            git push https://${GIT_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                            '''
                    }    
                }
            }
        }
    }
}
